[{"C:\\project\\react-and-web3-demo-app\\src\\index.js":"1","C:\\project\\react-and-web3-demo-app\\src\\App.js":"2","C:\\project\\react-and-web3-demo-app\\src\\components\\Home\\Home.js":"3","C:\\project\\react-and-web3-demo-app\\src\\components\\Login\\Login.js":"4","C:\\project\\react-and-web3-demo-app\\src\\components\\UI\\Card\\Card.js":"5"},{"size":174,"mtime":1666344782626,"results":"6","hashOfConfig":"7"},{"size":3470,"mtime":1666404170955,"results":"8","hashOfConfig":"7"},{"size":317,"mtime":1666344782621,"results":"9","hashOfConfig":"7"},{"size":2116,"mtime":1666362068285,"results":"10","hashOfConfig":"7"},{"size":199,"mtime":1666344782624,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"15xqdoe",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\project\\react-and-web3-demo-app\\src\\index.js",[],["24","25"],"C:\\project\\react-and-web3-demo-app\\src\\App.js",["26","27"],"import { useState, useEffect } from \"react\";\r\nimport Home from \"./components/Home/Home\";\r\nimport Login from \"./components/Login/Login\";\r\nimport Web3 from \"web3\";\r\n\r\nfunction App() {\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [currentAccount, setCurrentAccount] = useState(null);\r\n  const [provider, setProvider] = useState(window.ethereum);\r\n  const [chainId, setChainId] = useState(null);\r\n  const [web3, setWeb3] = useState(null);\r\n\r\n  const NETWORKS = {\r\n    1: \"Ethereum Main Network\",\r\n    3: \"Ropsten Test Network\",\r\n    4: \"Rinkeby Test Network\",\r\n    5: \"Goerli Test Network\",\r\n    42: \"Kovan Test Network\",\r\n  };\r\n\r\n  const onLogin = async (provider) => {\r\n    const web3 = new Web3(provider); \r\n    const accounts = await web3.eth.getAccounts();\r\n    const chainId = await web3.eth.getChainId();\r\n    if (accounts.length === 0) { // 로그인 실패시\r\n      onLogout();\r\n      console.log(\"Please connect to MetaMask!\");\r\n    } else if (accounts[0] !== currentAccount) { // 로그인 성공\r\n      setProvider(provider); // provider 셋팅\r\n      setWeb3(web3);         // web3 셋팅\r\n      setChainId(chainId);  // 현재 지갑 네트워크  셋팅\r\n      setCurrentAccount(accounts[0]); // 지갑 주소 셋팅\r\n      setIsConnected(true);  // 연결된상태를 프론트에 알리는 state 셋팅\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n      const handleAccountsChanged = async (accounts) => {\r\n        const web3Accounts = await web3.eth.getAccounts(); //지갑\r\n        if (accounts.length === 0) { // 지갑이 없으면 ? \r\n          console.log(\"Please connect to MetaMask!\");\r\n        } else if (accounts[0] !== currentAccount) {\r\n          setCurrentAccount(accounts[0]); // 지갑 연결\r\n          setIsConnected(true); // 지갑연결 확인 \r\n        }\r\n      }\r\n\r\n      const handleChainChanged = async (chainId) => {\r\n        const web3ChainId = await web3.eth.getChainId(); \r\n        setChainId(web3ChainId);  // 네트워크  state에 저장 \r\n      };\r\n\r\n      if (isConnected) {\r\n      provider.on(\"accountsChanged\", handleAccountsChanged);  // 계정 전환 감지\r\n      provider.on(\"chainChanged\", handleChainChanged); // 네트워크 전환 감지\r\n    }\r\n\r\n    // ethereum.on('disconnect', handler: (error: ProviderRpcError) => void);\r\n\r\n    return () => {\r\n      if (isConnected) {\r\n        provider.removeListener(\"accountsChanged\", handleAccountsChanged);\r\n        provider.removeListener(\"chainChanged\", handleChainChanged);\r\n      }\r\n    };\r\n  }, [isConnected]);\r\n\r\n\r\n  const getCurrentNetwork = (chainId) => {\r\n    return NETWORKS[chainId];\r\n  };\r\n\r\n  const onLogout = () => {\r\n    setIsConnected(false);\r\n    setCurrentAccount(null);\r\n    setWeb3(null);\r\n    setChainId(null);\r\n    setProvider(null);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button style={{ position: \"absolute\" }}  onClick={onLogout} >로그아웃</button>\r\n      <header className=\"main-header\">\r\n        <h1>React &amp; Web3</h1>\r\n        <nav className=\"nav\">\r\n          <ul>\r\n            <li>\r\n              <a href=\"/\">{currentAccount}</a>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </header>\r\n      <main>\r\n        {!isConnected && <Login onLogin={onLogin} onLogout={onLogout} />}\r\n        {isConnected && (\r\n          <Home\r\n            currentAccount={currentAccount}\r\n            currentNetwork={getCurrentNetwork(chainId)}\r\n          />\r\n        )} \r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\project\\react-and-web3-demo-app\\src\\components\\Home\\Home.js",[],"C:\\project\\react-and-web3-demo-app\\src\\components\\Login\\Login.js",[],"C:\\project\\react-and-web3-demo-app\\src\\components\\UI\\Card\\Card.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":39,"column":15,"nodeType":"34","messageId":"35","endLine":39,"endColumn":27},{"ruleId":"36","severity":1,"message":"37","line":66,"column":6,"nodeType":"38","endLine":66,"endColumn":19,"suggestions":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'web3Accounts' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentAccount', 'provider', and 'web3.eth'. Either include them or remove the dependency array.","ArrayExpression",["42"],"no-global-assign","no-unsafe-negation",{"desc":"43","fix":"44"},"Update the dependencies array to be: [currentAccount, isConnected, provider, web3.eth]",{"range":"45","text":"46"},[2344,2357],"[currentAccount, isConnected, provider, web3.eth]"]