{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\react-and-web3-demo-app\\\\src\\\\components\\\\Login\\\\Login.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = props => {\n  _s();\n  const [isConnecting, setIsConnecting] = useState(false); // 연결중 표시 확인\n  const [provider, setProvider] = useState(window.ethereum); // window.ethereum 있는지 감시자 \n  const [isMetaMaskInstalled, setIsMetaMaskInstalled] = useState(false); // 메타 마스크 설치 확인\n\n  useEffect(() => {\n    setProvider(detectProvider());\n    // 접속 했을때 감시자 셋팅 \n  }, []);\n  useEffect(() => {\n    if (provider) {\n      if (provider !== window.ethereum) {\n        console.error(\"메타마스크를 설치해!!\");\n      }\n      setIsMetaMaskInstalled(true);\n    }\n    // 메타마스크를 설치 했는지 안했는지 확인 해주는 문구 \n  }, [provider]);\n  const detectProvider = () => {\n    //provider 는 감지 \n    let provider;\n    if (window.ethereum) {\n      provider = window.ethereum;\n    } else {\n      console.alert(\"No Ethereum browser detected! Check out MetaMask\");\n      // 메타마스크가 감지되지 않음 \n    }\n\n    return provider;\n  };\n  const onLoginHandler = async () => {\n    const provider = detectProvider();\n    if (provider) {\n      if (provider !== window.ethereum) {\n        console.error(\"Not window.ethereum provider. Do you have multiple wallet installed ? \");\n      }\n    }\n    setIsConnecting(true);\n    await provider.request({\n      method: \"eth_requestAccounts\"\n    });\n    props.onLogin(provider);\n    // props.onLogin();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: [isMetaMaskInstalled && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onLoginHandler,\n      className: classes.button,\n      type: \"button\",\n      children: [!isConnecting && \"Connect\", isConnecting && \"Loading...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), !isMetaMaskInstalled && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/\",\n        children: \"Install MetaMask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"BzycAuBOOOH9FyXqTmSLfsn1QvQ=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["useState","useEffect","Card","classes","Login","props","isConnecting","setIsConnecting","provider","setProvider","window","ethereum","isMetaMaskInstalled","setIsMetaMaskInstalled","detectProvider","console","error","alert","onLoginHandler","request","method","onLogin","login","button"],"sources":["C:/project/react-and-web3-demo-app/src/components/Login/Login.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Card from \"../UI/Card/Card\";\r\nimport classes from \"./Login.module.css\";\r\n\r\nconst Login = (props) => {\r\n  const [isConnecting, setIsConnecting] = useState(false); // 연결중 표시 확인\r\n  const [provider, setProvider] = useState(window.ethereum); // window.ethereum 있는지 감시자 \r\n  const [isMetaMaskInstalled, setIsMetaMaskInstalled] = useState(false); // 메타 마스크 설치 확인\r\n\r\n  useEffect(() => {\r\n    setProvider(detectProvider());\r\n    // 접속 했을때 감시자 셋팅 \r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (provider) {\r\n      if (provider !== window.ethereum) {\r\n        console.error(\r\n          \"메타마스크를 설치해!!\"\r\n        );\r\n      }\r\n      setIsMetaMaskInstalled(true);\r\n    }\r\n    // 메타마스크를 설치 했는지 안했는지 확인 해주는 문구 \r\n  }, [provider]);\r\n\r\n  const detectProvider = () => {\r\n    //provider 는 감지 \r\n    let provider;\r\n    if (window.ethereum) {\r\n      provider = window.ethereum;\r\n    } else {\r\n      console.alert(\"No Ethereum browser detected! Check out MetaMask\");\r\n      // 메타마스크가 감지되지 않음 \r\n    }\r\n    return provider;\r\n  };\r\n\r\n  const onLoginHandler = async () => {\r\n    const provider = detectProvider();\r\n    if(provider) {\r\n      if (provider !== window.ethereum) {\r\n        console.error(\"Not window.ethereum provider. Do you have multiple wallet installed ? \")\r\n      }\r\n    }\r\n    setIsConnecting(true);\r\n    await provider.request({\r\n      method:\"eth_requestAccounts\"\r\n    })\r\n    props.onLogin(provider);\r\n    // props.onLogin();\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.login}>\r\n    {isMetaMaskInstalled && (\r\n        <button\r\n          onClick={onLoginHandler}\r\n          className={classes.button}\r\n          type=\"button\"\r\n        >\r\n          {!isConnecting && \"Connect\"}\r\n          {isConnecting && \"Loading...\"}\r\n        </button>\r\n       )} \r\n       {!isMetaMaskInstalled && (\r\n        <p>\r\n          <a href=\"/\">Install MetaMask</a>\r\n        </p>\r\n      )}  \r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,iBAAiB;AAClC,OAAOC,OAAO,MAAM,oBAAoB;AAAC;AAEzC,MAAMC,KAAK,GAAIC,KAAK,IAAK;EAAA;EACvB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACzD,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAACU,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEvEC,SAAS,CAAC,MAAM;IACdQ,WAAW,CAACK,cAAc,EAAE,CAAC;IAC7B;EACF,CAAC,EAAE,EAAE,CAAC;EAENb,SAAS,CAAC,MAAM;IACd,IAAIO,QAAQ,EAAE;MACZ,IAAIA,QAAQ,KAAKE,MAAM,CAACC,QAAQ,EAAE;QAChCI,OAAO,CAACC,KAAK,CACX,cAAc,CACf;MACH;MACAH,sBAAsB,CAAC,IAAI,CAAC;IAC9B;IACA;EACF,CAAC,EAAE,CAACL,QAAQ,CAAC,CAAC;EAEd,MAAMM,cAAc,GAAG,MAAM;IAC3B;IACA,IAAIN,QAAQ;IACZ,IAAIE,MAAM,CAACC,QAAQ,EAAE;MACnBH,QAAQ,GAAGE,MAAM,CAACC,QAAQ;IAC5B,CAAC,MAAM;MACLI,OAAO,CAACE,KAAK,CAAC,kDAAkD,CAAC;MACjE;IACF;;IACA,OAAOT,QAAQ;EACjB,CAAC;EAED,MAAMU,cAAc,GAAG,YAAY;IACjC,MAAMV,QAAQ,GAAGM,cAAc,EAAE;IACjC,IAAGN,QAAQ,EAAE;MACX,IAAIA,QAAQ,KAAKE,MAAM,CAACC,QAAQ,EAAE;QAChCI,OAAO,CAACC,KAAK,CAAC,wEAAwE,CAAC;MACzF;IACF;IACAT,eAAe,CAAC,IAAI,CAAC;IACrB,MAAMC,QAAQ,CAACW,OAAO,CAAC;MACrBC,MAAM,EAAC;IACT,CAAC,CAAC;IACFf,KAAK,CAACgB,OAAO,CAACb,QAAQ,CAAC;IACvB;EACF,CAAC;;EAED,oBACE,QAAC,IAAI;IAAC,SAAS,EAAEL,OAAO,CAACmB,KAAM;IAAA,WAC9BV,mBAAmB,iBAChB;MACE,OAAO,EAAEM,cAAe;MACxB,SAAS,EAAEf,OAAO,CAACoB,MAAO;MAC1B,IAAI,EAAC,QAAQ;MAAA,WAEZ,CAACjB,YAAY,IAAI,SAAS,EAC1BA,YAAY,IAAI,YAAY;IAAA;MAAA;MAAA;MAAA;IAAA,QAE/B,EACA,CAACM,mBAAmB,iBACpB;MAAA,uBACE;QAAG,IAAI,EAAC,GAAG;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAqB;MAAA;MAAA;MAAA;IAAA,QAEnC;EAAA;IAAA;IAAA;IAAA;EAAA,QACI;AAEX,CAAC;AAAC,GApEIR,KAAK;AAAA,KAALA,KAAK;AAsEX,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module"}